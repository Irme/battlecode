package communicator2002;

import java.util.ArrayList;

import battlecode.common.*;

public class HQBehavior {
	
	/**
	 * 
	 * Defines the possible states the HQ can take in.
	 * 
	 */
	private enum HQState{
		INIT,DEFAULT;
	}
	
	
	/** locations that are generated by MapMaker are showing building positions**/
	public static MapLocation[] assemblyPositions;
	
	/** storage for the last target for the soldiers**/
	public static MapLocation lastTarget;
	
	public static MapLocation enemyHQ;
	public static MapLocation thisPos;
	
	/** The current state of the HQ. Allows to separate logical areas**/
	public static HQState state = HQState.INIT;
	
	/** contains the models the HQ has of the soldiers**/
	public static RobotRepresentation[] robots = new RobotRepresentation[StaticVariables.MAX_ROBOTS_SPAWN];
	
	/** containing all possible groups*/
	public static Group[] groups;
	
	/** debugging constant **/
	static int lifeCount = 0;
	/** debugging constant **/
	static int byteCodeSum = 0;
	
	/**for the example*/
	public static MapLocation moveTo;
	
	/**
	 * Contains the logic of the HQ. is called every round.
	 * 
	 * @param rc
	 * @throws Exception
	 */
	public static void hqBehavior(RobotController rc) throws Exception{
		lifeCount ++;
		switch (state) {
		case INIT:
			enemyHQ = rc.senseEnemyHQLocation();
			thisPos = rc.getLocation();
			MapMaker.searchForSpots(rc, 0);
			assemblyPositions = new MapLocation[1];
			assemblyPositions[0] = MapMaker.bestFound;
			state = HQState.DEFAULT;
			groups = new Group[StaticVariables.MAX_POSSIBLE_GROUPS];
			for(int i = 0; i < groups.length; i ++){
				groups[i] = new Group();
			}
			moveTo = thisPos;
			break;
		case DEFAULT:
			tryToSpawn(rc);
            deliverID(rc);
            updateInteralRobotRepresentation(rc);
            
            // Note that the snail trail function has changed. The actual length of the tail is not influencing the bytecode
            // consumption due to an more efficient implementation. Feel free to change the tail length as desired.
            
            // Note this is just an example.
            
            // all soldiers that spawn are automatically stored in groups[0]
            
            // this command moves all soldiers from groups[0] to groups[1]
           	groups[0].assignToOtherGroup(rc, groups[1], 0, 20);
           	
           	// this line sends a command to all soldiers of groups[1], the function ensures that this is done only once and all
           	// new soldiers are getting the same command automatically. The sendCommandToGroup function will send a new command
           	// once it gets a new command, it wont send the same command twice.
           	groups[1].sendCommandToGroup(moveTo, StaticVariables.COMMAND_GROUP_MOVE_TO_LOCATION, rc);
           	
           	// this is just a plain example in which the soldiers are waiting to group up at the hq and then move towards the enemyHQ
           	// this is a basic idea of how to move along a path
           	// this example code is not the actual functionality mentioned for the final player, its just meant to demonstrate the 
           	// new group structures and the group movement
           	if(rc.senseRobotCount() >= 10 && Clock.getRoundNum()%15==0){
           		moveTo = moveTo.add(moveTo.directionTo(enemyHQ));
           	}else if(rc.senseRobotCount() < 6){
           		moveTo = thisPos;
           	}
			break;
		}
	}
	
	/**
	 * Reeds the feedback from all soldiers and updates the internal representation of the robots.
	 * This contains a counter that indicates if the soldier is alive, and also the map location
	 * of the soldiers.
	 * 
	 * @param rc
	 * @throws Exception
	 */
	public static void updateInteralRobotRepresentation(RobotController rc) throws Exception{

		for(int i=StaticVariables.MAX_ROBOTS_SPAWN; --i >= 0;) {
			if(robots[i] != null){
				
				//reeds the feedback associated with this soldier.
				int feedBack = rc.readBroadcast(StaticVariables.ROBOT_FEEDBACK_CHANNEL_START+i);
				
				//remembers the old life count of the soldier
				int current = robots[i].lifeTime;
				
				//sets the lifecount of the soldier to the new value. 
				robots[i].lifeTime = feedBack;
				
				//Interpreters the feedback to get the maplocation of the soldier.
				robots[i].mL = new MapLocation((feedBack&16256)>>7,feedBack&127);

				//if the old lifecount is equal to the current, than the soldier died because he didn't send new feedback.
				//its a special case if the robot just spawned, in this case the previous feedback is equal to the current.
				//This continues until the soldier sends the first time some feedback.
				if(feedBack == current && !robots[i].initilazie){
					robots[i].notifyDeath();
					robots[i] = null;
					rc.broadcast(StaticVariables.ROBOT_FEEDBACK_CHANNEL_START+i,0);
				}else if(feedBack != current){
					robots[i].initilazie = false;
				}
			}
		}
	}
	
	/**
	 * Reads the broadcast channel allocated for the robot id's.
	 * A 1 stands for a request for a new ID. The HQ looks for the next free space
	 * in the list of soldier-representations. The index of this channel +1 is the new 
	 * ID which is written back into the ID-channel. The Soldier reads this ID and clears
	 * the ID-channel(writing 0 into the ID-channel) for new requests.
	 * 
	 * @param rc
	 * @throws Exception
	 */
	public static void deliverID(RobotController rc) throws Exception{
		int current = rc.readBroadcast(StaticVariables.ROBOT_ID_CHANNEL);
		if(current == 1){
			for(int i = 0; i < robots.length; i ++){
				if(robots[i] == null){
					rc.broadcast(StaticVariables.ROBOT_ID_CHANNEL, (i+1)*10);
					robots[i] = new RobotRepresentation(i);
					groups[0].add(rc, robots[i]);
					return;
				}
			}
		}
	}

	public static void tryToSpawn(RobotController rc) throws Exception{
		if(rc.isActive()){
			int count = rc.senseRobotCount();
			if (count < StaticVariables.MAX_ROBOTS_SPAWN) {
				for(int i = 0; i < 8; i ++){
					if (rc.senseObjectAtLocation(HQBehavior.thisPos.add(StaticVariables.directions[i])) == null) {
						rc.spawn(StaticVariables.directions[i]);
						return;
					}
				}
				
			}
		}
	}
	
}
